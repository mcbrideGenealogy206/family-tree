else if(X%%5 == 0) print("Buzz")
else print(X)
}
},
error = function(cond){ print("ERROR: input must be numeric or a vector of numeric")}
)
}
fizzbuzz(1)
fizzbuzz(3)
fizzbuzz(5)
fizzbuzz(15)
fizzbuzz(9:15)
fizzbuzz(15:9)
fizzbuzz(Inf)
fizzbuzz("A")
fizzbuzz(1.5)
fizzbuzz = function(v)
{
tryCatch({
for(X in v){
if(X%%3 == 0 && X%%5 == 0) print("FizzBuzz")
else if(X%%3 == 0) print("Fizz")
else if(X%%5 == 0) print("Buzz")
else print(X)
}
},
error = function(cond){ print("ERROR: input must be finite numeric or a vector of finite numeric")}
)
}
fizzbuzz(1)
fizzbuzz(3)
fizzbuzz(5)
fizzbuzz(15)
fizzbuzz(9:15)
fizzbuzz(15:9)
fizzbuzz(Inf)
fizzbuzz("A")
fizzbuzz(1.5)
fizzbuzz = function(v)
{
tryCatch({
for(X in v){
if(X%%3 == 0 && X%%5 == 0) print("FizzBuzz")
else if(X%%3 == 0) print("Fizz")
else if(X%%5 == 0) print("Buzz")
else print(X)
}
},
error = function(cond){ print("ERROR: input must be finite numeric or a vector of finite numeric")}
)
}
fizzbuzz(1)
fizzbuzz(3)
fizzbuzz(5)
fizzbuzz(15)
fizzbuzz(9:15)
fizzbuzz(15:9)
fizzbuzz(Inf)
fizzbuzz("A")
fizzbuzz(1.5)
install.packages(c("backports", "digest", "jsonlite", "knitr", "Rcpp", "rprojroot", "yaml", "zoo"))
help(pbinom)
qbinom(0.5)
qbinom(0.5, 100)
qbinom(0.5, n = 5, p = 0.5)
qbinom(0.5, 5, 0.5)
pbinom(0.75, 100, 0.5)
dbinom(50, 100, 0.5)
sum(dbinom(50:100, 100, 0.5))
sum(dbinom(50:100, 100, 0.01))
sum(dbinom(50:100), 100, 0.3)
sum(dbinom(50:100, 100, 0.3))
sum(dbinom(90:100, 100, 0.5))
sum(dbinom(90:100, 100, 0.2))
wikiData = read.csv(file.choose(), header = TRUE)
head(wikiData)
help("lm")
model = glm(isSkill ~ pageType, family = binomial(logit), data = wikiData)
summary(model)
plot(isSkill ~ pageType, data = wikiData)
table(isSkill ~ pageType, data = wikiData)
wikiData[2]
wikiData[,2]
wikiData[2,]
sum[wikiData$pageType == "article" & wikiData$isSkill == 1]
wikiData$pageType == "article"
sum(wikiData$pageType == "article")
wikiData$isSkill ==
1
wikiData$pageType == "article" & wikiData$isSkill == 1
sum(wikiData$pageType == "article" & wikiData$isSkill == 1)
sum(is.NA(wikiData$pageType == "article" & wikiData$isSkill == 1))
sum(is.na(wikiData$pageType == "article" & wikiData$isSkill == 1))
sum(na.remove(wikiData$pageType == "article" & wikiData$isSkill == 1))
help("sum")
sum(wikiData$pageType == "article" & wikiData$isSkill == 1, na.rm = TRUE)
sum(wikiData$pageType != "article" & wikiData$isSkill == 1, na.rm = TRUE)
sum(wikiData$pageType == "article" & wikiData$isSkill != 1, na.rm = TRUE)
sum(wikiData$pageType != "article" & wikiData$isSkill != 1, na.rm = TRUE)
summary(model)
remove(model)
remove(wikiData)
test = read.graph(file.choose(), format = c("gml"))
test = read.csv(file.choose(), header = TRUE)
View(test)
test = read.csv(file.choose(), header = TRUE)
remove(test)
set.seed(0003921419)
MyNodes = read.csv(file.choose(), header = TRUE)
MohsenNodes = read.csv(file.choose(), header = TRUE)
x = rnorm(1000, sd = 5)
y = 3*X + 5 + rnrom(1000)
y = 3*x + 5 + rnrom(1000)
y = 3*x + 5 + rnom(1000)
y = 3*x + 5 + rnorm(1000)
reduced = lm(y ~ x)
full = lm(y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5) + I(x^6) + I(x^7) + I(x^8) + I(x^9) + I(x^10))
anova(full, reduced)
anova(reduced full)
anova(reduced, full)
help("paste")
formula = "y ~ "
for(i in 1:999){
formula = paste(formula, " + I(x^", i, ")")
}
full = lm(formula)
anova(reduced, full)
summary(formula)
formula
summary(full)
remove(full)
full = lm(formula)
formula = "y ~ "
for(i in 1:998){
formula = paste(formula, " + I(x^", i, ")")
}
full = lm(formula)
anova(reduced, full)
remove(formula)
remove(i)
formula = "y ~ "
for(i in 1:998){
formula = paste(formula, " + I(x^", i, ")")
}
full = lm(formula)
anova(reduced, full)
formula = "y ~ "
for(i in 1:800){
formula = paste(formula, " + I(x^", i, ")")
}
full = lm(formula)
anova(reduced, full)
formula = "y ~ "
for(i in 1:700){
formula = paste(formula, " + I(x^", i, ")")
}
full = lm(formula)
anova(reduced, full)
formula = "y ~ "
for(i in 1:600){
formula = paste(formula, " + I(x^", i, ")")
}
full = lm(formula)
anova(reduced, full)
formula = "y ~ "
for(i in 1:500){
formula = paste(formula, " + I(x^", i, ")")
}
full = lm(formula)
anova(reduced, full)
formula = "y ~ "
for(i in 1:500){
formula = paste(formula, " + I(x^", i, ")")
}
full = lm(formula)
anova(reduced, full)
formula = "y ~ "
for(i in 1:400){
formula = paste(formula, " + I(x^", i, ")")
}
full = lm(formula)
anova(reduced, full)
formula = "y ~ "
for(i in 1:300){
formula = paste(formula, " + I(x^", i, ")")
}
full = lm(formula)
anova(reduced, full)
formula = "y ~ "
for(i in 1:200){
formula = paste(formula, " + I(x^", i, ")")
}
full = lm(formula)
anova(reduced, full)
plot(y ~ x)
abline(full)
remove(x, y)
remove(reduced, full, i, formula)
x = rnorm(1000, sd = 3)
y = 5*x + rnorm(1000, sd = 8)
plot(y ~ x)
y = 5*x + rnorm(1000, sd = 10)
plot(y ~ x)
reduced = lm(y ~ x)
formula = "y ~ "
for(i in 1:900){
formula = paste(formula, " + I(x^", i, ")")
}
full = lm(formula)
anova(reduced, full)
formula = "y ~ "
for(i in 1:800){
formula = paste(formula, " + I(x^", i, ")")
}
full = lm(formula)
anova(reduced, full)
formula = "y ~ "
for(i in 1:700){
formula = paste(formula, " + I(x^", i, ")")
}
full = lm(formula)
anova(reduced, full)
formula = "y ~ "
for(i in 1:600){
formula = paste(formula, " + I(x^", i, ")")
}
full = lm(formula)
anova(reduced, full)
formula = "y ~ "
for(i in 1:500){
formula = paste(formula, " + I(x^", i, ")")
}
full = lm(formula)
anova(reduced, full)
formula = "y ~ "
for(i in 1:400){
formula = paste(formula, " + I(x^", i, ")")
}
full = lm(formula)
anova(reduced, full)
formula = "y ~ "
for(i in 1:300){
formula = paste(formula, " + I(x^", i, ")")
}
full = lm(formula)
anova(reduced, full)
abline(full)
lines(full)
plot(y ~ x)
lines(x, fitted(full))
sum(predict(full) != fitted(full))
predict(full)
fitted(full)
predict(full) == fitted(full)
help("predict")
plot(y ~ x)
plot(x, predict(full))
plot(y ~ x)
lines(x, predict(full))
lines(-10000:10000/1000, predict(full))
plot(y ~ x)
lines(-1000:1000/100, predict(full))
lines(-500:500/50, predict(full))
help("predict")
sort(x)
plot(y ~ x)
lines(sort(x), fitted(full))
abline(reduced)
summary(reduced)$sd
summary(reduced)$MSE
help("summary.lm")
summary(reduced)$sigma
summary(full)$sigma
plot(residuals(full) ~ x)
plot(residuals(full) ~ fitted(full))
plot(y ~ x)
lines(sort(x), predict(full))
sd(x)
sd(y)
sd(residuals(reduced))
reduced
x = rnorm(1000, 3)
y = 5*x + rnorm(1000, 10)
formula = "y ~ "
for(i in 1:300){
formula = paste(formula, " + I(x^", i, ")")
}
full = lm(formula)
anova(reduced, full)
plot(y ~ x)
lines(sort(x), full)
x = rnorm(1000, sd = 3)
y = 5*x + rnorm(1000, sd = 10)
formula = "y ~ "
for(i in 1:300){
formula = paste(formula, " + I(x^", i, ")")
}
full = lm(formula)
anova(reduced, full)
plot(y ~ x)
lines(sort(x), full)
x = rnorm(1000, sd = 3)
y = 5*x + rnorm(1000, sd = 10)
reduced = lm(y ~ x)
formula = "y ~ "
for(i in 1:300){
formula = paste(formula, " + I(x^", i, ")")
}
full = lm(formula)
anova(reduced, full)
plot(y ~ x)
lines(sort(x), fitted(full))
sum(x>=4)
testFull = lm(y ~ x + I(x^2))
anova(reduced, testFull)
testFull2 = lm(y ~ x + I(x^2) + I(x^3))
anova(reduced, testFull2)
tooReduced = lm(y ~ 1)
anova(tooReduced, reduced)
x = rnorm(1000, sd = 3)
y = 5*x + rnorm(1000, sd = 10)
reduced = lm(y ~ x)
formula = "y ~ "
for(i in 1:300){
formula = paste(formula, " + I(x^", i, ")")
}
full = lm(formula)
anova(reduced, full)
plot(y ~ x)
lines(sort(x), fitted(full))
x = rnorm(1000, sd = 3)
y = 5*x + rnorm(1000, sd = 10)
reduced = lm(y ~ x)
formula = "y ~ "
for(i in 1:300){
formula = paste(formula, " + I(x^", i, ")")
}
full = lm(formula)
anova(reduced, full)
plot(y ~ x)
lines(sort(x), fitted(full))
x = rnorm(1000, sd = 3)
y = 5*x + rnorm(1000, sd = 10)
reduced = lm(y ~ x)
formula = "y ~ "
for(i in 1:300){
formula = paste(formula, " + I(x^", i, ")")
}
full = lm(formula)
anova(reduced, full)
plot(y ~ x)
lines(sort(x), fitted(full))
x = rnorm(1000, sd = 3)
y = 5*x + rnorm(1000, sd = 10)
reduced = lm(y ~ x)
formula = "y ~ "
for(i in 1:300){
formula = paste(formula, " + I(x^", i, ")")
}
full = lm(formula)
anova(reduced, full)
plot(y ~ x)
lines(sort(x), fitted(full))
susy = read.csv(file.choose(), header = TRUE)
susy = read.csv(file.choose(), header = FALSE)
myModel = glm(V9 ~ ., data = susy, family = binomial)
plot(myModel)
plot(residuals(myModel) ~ fitted(myModel))
head(fitted(myModel))
head(susy$V9)
head(residuals(myModel))
help("residuals")
res = susy$V9 - fitted(myModel)
plot(res ~ fitted(myModell))
plot(res ~ fitted(myModel))
table(susy$V9, ifelse(fitted(myModel) > 0.5, 1, 0))
census = read.csv(file.choose(), header = TRUE)
View(census)
summary(census$X77516)
library(tm)
library(SnowballC)
library(wordcloud)
install.packages(tm)
install.packages("tm")
install.packages("SnowballC")
install.packages("wordcloud")
library(tm)
library(SnowballC)
library(wordcloud)
jeopQ = read.csv(file.choose(), stringsAsFactors = FALSE)
install.packages("RColorBrewer")
install.packages("tm")
library(tm)
library(SnowballC)
library(wordcloud)
install.packages("rmarkdown")
install.packages("tm")
library(tm)
install.packages('devtools')
library(devtools)
slam_url <- "https://cran.r-project.org/src/contrib/Archive/slam/slam_0.1-37.tar.gz"
install_url(slam_url)
slam_url <- "https://cran.r-project.org/src/contrib/Archive/slam/slam_0.1-37.tar.gz"
install_url(slam_url)
install.packages('slam')
install.packages('installr')
library(installr)
updateR()
install.packages('tm')
test = read.csv(file.choose(), header = TRUE)
summary(test$numEdges)
plot(test$numEdges)
plot(test$numEdges, pch = 19)
plot(hist(test$numEdges))
help("hist")
plot(hist(test$numEdges, breaks = 0:203))
plot(hist(test$numEdges, breaks = 0:20))
head(sort(test$numEdges))
tail(sort(test$numEdges))
sort(test$numEdges)
help("tail")
tail(test$numEdges, n = 100)
tail(sotr(test$numEdges), n = 100)
tail(sort(test$numEdges), n = 100)
tail(sort(test$numEdges), n = 400)
help("qpois")
ppois(100, 1)
help("rep")
rep(max(rpois(2500, lambda = 1)), 100)
rep(max(rnbinom(n = 2500, size = 1, prob = 0.3)))
rep(max(rnbinom(n = 2500, size = 1, prob = 0.3)), 100)
rep(max(rnbinom(n = 1, size = 1, prob = 0.3)), 100)
replicate(max(rnbinom(n = 2500, size = 1, prob = 0.3)), 100)
replicate(max(rnbinom(n = 2500, size = 1, prob = 0.3)), 100)
help("replicate")
replicate(100, rnbinom(n = 2500, size = 1, prob = 0.3))
replicate(100, max(rnbinom(n = 2500, size = 1, prob = 0.3)))
replicate(100, max(rnbinom(n = 2500, size = 1, prob = 0.2)))
replicate(100, max(rnbinom(n = 2500, size = 1, prob = 0.1)))
replicate(100, max(rnbinom(n = 2500, size = 1, prob = 0.01)))
replicate(100, max(rnbinom(n = 2500, size = 1, prob = 0.05)))
replicate(100, max(rnbinom(n = 2500, size = 1, prob = 0.04)))
replicate(100, sum(rnbinom(n = 2500, size = 1, prob = 0.04) == 1))
replicate(100, max(rpois(2500, lambda = 2)))
test = read.csv(file.choose(), header = TRUE)
mean(test$isSkill)
head(test)
table(isSkil ~ type)
table(isSkil ~ type, data = test)
help("table")
table(test$isSkil, test$type)
plot(test$numEdges > 1, isSkill)
plot(test$numEdges > 1, test$isSkill)
table(test$numEdges > 1, test$isSkill)
table(test$numEdges > 1, test$isSkill, test$type)
table(test$distance > 1, test$isSkill, test$type)
?file.path
?knitr::include_graphics
install.packages("GENLIB")
GENLIB::gen.graph()
?GENLIB::gen.graph
ind<-c(1,2,3,11:21,101:108,201:202)
father<-c(11,15,15,102,0,102,0,103,103,0,105,105,107,107,0,202,0,202,202,0,202,0,0,0)
mother<-c(12,14,14,101,0,101,0,104,104,0,106,106,108,108,0,201,0,201,201,0,201,0,0,0)
sex<-c(1,2,2,1,2,1,2,1,2,1,2,2,2,1,2,1,1,2,1,2,1,2,2,1)
gen.df<-data.frame(ind, father, mother, sex)
genEx<-gen.genealogy(gen.df)
gen.graph(genEx)
library(GENLIB)
ind<-c(1,2,3,11:21,101:108,201:202)
father<-c(11,15,15,102,0,102,0,103,103,0,105,105,107,107,0,202,0,202,202,0,202,0,0,0)
mother<-c(12,14,14,101,0,101,0,104,104,0,106,106,108,108,0,201,0,201,201,0,201,0,0,0)
sex<-c(1,2,2,1,2,1,2,1,2,1,2,2,2,1,2,1,1,2,1,2,1,2,2,1)
gen.df<-data.frame(ind, father, mother, sex)
genEx<-gen.genealogy(gen.df)
gen.graph(genEx)
data(geneaJi)
geneaJi[1:5,]
genJi<-gen.genealogy(geneaJi)
gen.graph(genJi)
install.packages("devtools")
?devtools::install_github
devtools::install_github("Bioconductor-mirror/biocGraph")
library(biocGraph)
?imageMap
detach(biocGraph)
detach("biocGraph")
tempfile()
interactive()
fhtml = paste(tempfile(), ".html", sep="")
fhtml = paste(tempfile(), ".html", sep="")
fpng  =paste(tempfile(), ".png", sep="")
set.seed(123)
g  = randomEGraph(letters[14:22], 0.2)
tooltip = paste("This is node", nodes(g))
url = paste("This could be a link for node", nodes(g))
names(url) = names(tooltip) = nodes(g)
width = height = 512
png(fpng, width=width, height=height)
par(mai=rep(0,4))
lg = agopen(g, name="My layout")
plot(lg)
con = file(fhtml, open="wt")
writeLines("<html><head><title>Click Me</title></head><body>\n", con)
imageMap(lg, con, fpng, tags=list(HREF=url, TITLE=tooltip), width=width, height=height)
writeLines("</body></html>", con)
close(con)
dev.off()
cat("Now have a look at file", fhtml, "with your browser.\n")
browseURL(fhtml)
?agopen
setwd("C:/Users/Michael/Box Sync/Family Tree")
